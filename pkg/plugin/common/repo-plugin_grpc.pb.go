// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepositoryPluginClient is the client API for RepositoryPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryPluginClient interface {
	// RepoHost returns the host which this plugins integrates with
	RepoHost(ctx context.Context, in *RepoHostRequest, opts ...grpc.CallOption) (*RepoHostResponse, error)
	// Resolve resolves the repo's revision based on its ref(erence)
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	// ContentInitContainer produces the init container YAML required to initialize
	// the build context from this repository in /workspace.
	ContentInitContainer(ctx context.Context, in *ContentInitContainerRequest, opts ...grpc.CallOption) (*ContentInitContainerResponse, error)
	// Download downloads a file from the repository.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	// ListFiles lists all files in a directory.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesReponse, error)
	// GetRemoteAnnotations extracts Bhojpur Piro annotations form information associated
	// with a particular commit, e.g. the commit message, PRs or merge requests.
	// Implementors can expect the revision of the repo object to be set.
	GetRemoteAnnotations(ctx context.Context, in *GetRemoteAnnotationsRequest, opts ...grpc.CallOption) (*GetRemoteAnnotationsResponse, error)
}

type repositoryPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryPluginClient(cc grpc.ClientConnInterface) RepositoryPluginClient {
	return &repositoryPluginClient{cc}
}

func (c *repositoryPluginClient) RepoHost(ctx context.Context, in *RepoHostRequest, opts ...grpc.CallOption) (*RepoHostResponse, error) {
	out := new(RepoHostResponse)
	err := c.cc.Invoke(ctx, "/repoplugin.RepositoryPlugin/RepoHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryPluginClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/repoplugin.RepositoryPlugin/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryPluginClient) ContentInitContainer(ctx context.Context, in *ContentInitContainerRequest, opts ...grpc.CallOption) (*ContentInitContainerResponse, error) {
	out := new(ContentInitContainerResponse)
	err := c.cc.Invoke(ctx, "/repoplugin.RepositoryPlugin/ContentInitContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryPluginClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/repoplugin.RepositoryPlugin/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryPluginClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesReponse, error) {
	out := new(ListFilesReponse)
	err := c.cc.Invoke(ctx, "/repoplugin.RepositoryPlugin/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryPluginClient) GetRemoteAnnotations(ctx context.Context, in *GetRemoteAnnotationsRequest, opts ...grpc.CallOption) (*GetRemoteAnnotationsResponse, error) {
	out := new(GetRemoteAnnotationsResponse)
	err := c.cc.Invoke(ctx, "/repoplugin.RepositoryPlugin/GetRemoteAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryPluginServer is the server API for RepositoryPlugin service.
// All implementations must embed UnimplementedRepositoryPluginServer
// for forward compatibility
type RepositoryPluginServer interface {
	// RepoHost returns the host which this plugins integrates with
	RepoHost(context.Context, *RepoHostRequest) (*RepoHostResponse, error)
	// Resolve resolves the repo's revision based on its ref(erence)
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	// ContentInitContainer produces the init container YAML required to initialize
	// the build context from this repository in /workspace.
	ContentInitContainer(context.Context, *ContentInitContainerRequest) (*ContentInitContainerResponse, error)
	// Download downloads a file from the repository.
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	// ListFiles lists all files in a directory.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesReponse, error)
	// GetRemoteAnnotations extracts Bhojpur Piro annotations form information associated
	// with a particular commit, e.g. the commit message, PRs or merge requests.
	// Implementors can expect the revision of the repo object to be set.
	GetRemoteAnnotations(context.Context, *GetRemoteAnnotationsRequest) (*GetRemoteAnnotationsResponse, error)
	mustEmbedUnimplementedRepositoryPluginServer()
}

// UnimplementedRepositoryPluginServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryPluginServer struct {
}

func (UnimplementedRepositoryPluginServer) RepoHost(context.Context, *RepoHostRequest) (*RepoHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoHost not implemented")
}
func (UnimplementedRepositoryPluginServer) Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedRepositoryPluginServer) ContentInitContainer(context.Context, *ContentInitContainerRequest) (*ContentInitContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContentInitContainer not implemented")
}
func (UnimplementedRepositoryPluginServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedRepositoryPluginServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedRepositoryPluginServer) GetRemoteAnnotations(context.Context, *GetRemoteAnnotationsRequest) (*GetRemoteAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteAnnotations not implemented")
}
func (UnimplementedRepositoryPluginServer) mustEmbedUnimplementedRepositoryPluginServer() {}

// UnsafeRepositoryPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryPluginServer will
// result in compilation errors.
type UnsafeRepositoryPluginServer interface {
	mustEmbedUnimplementedRepositoryPluginServer()
}

func RegisterRepositoryPluginServer(s grpc.ServiceRegistrar, srv RepositoryPluginServer) {
	s.RegisterService(&RepositoryPlugin_ServiceDesc, srv)
}

func _RepositoryPlugin_RepoHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryPluginServer).RepoHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repoplugin.RepositoryPlugin/RepoHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryPluginServer).RepoHost(ctx, req.(*RepoHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryPlugin_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryPluginServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repoplugin.RepositoryPlugin/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryPluginServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryPlugin_ContentInitContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentInitContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryPluginServer).ContentInitContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repoplugin.RepositoryPlugin/ContentInitContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryPluginServer).ContentInitContainer(ctx, req.(*ContentInitContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryPlugin_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryPluginServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repoplugin.RepositoryPlugin/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryPluginServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryPlugin_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryPluginServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repoplugin.RepositoryPlugin/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryPluginServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryPlugin_GetRemoteAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryPluginServer).GetRemoteAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repoplugin.RepositoryPlugin/GetRemoteAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryPluginServer).GetRemoteAnnotations(ctx, req.(*GetRemoteAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryPlugin_ServiceDesc is the grpc.ServiceDesc for RepositoryPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repoplugin.RepositoryPlugin",
	HandlerType: (*RepositoryPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepoHost",
			Handler:    _RepositoryPlugin_RepoHost_Handler,
		},
		{
			MethodName: "Resolve",
			Handler:    _RepositoryPlugin_Resolve_Handler,
		},
		{
			MethodName: "ContentInitContainer",
			Handler:    _RepositoryPlugin_ContentInitContainer_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _RepositoryPlugin_Download_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _RepositoryPlugin_ListFiles_Handler,
		},
		{
			MethodName: "GetRemoteAnnotations",
			Handler:    _RepositoryPlugin_GetRemoteAnnotations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repo-plugin.proto",
}
