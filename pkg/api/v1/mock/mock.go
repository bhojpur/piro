// Code generated by MockGen. DO NOT EDIT.
// Source: piro.pb.go

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/bhojpur/piro/pkg/api/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockisStartLocalJobRequest_Content is a mock of isStartLocalJobRequest_Content interface.
type MockisStartLocalJobRequest_Content struct {
	ctrl     *gomock.Controller
	recorder *MockisStartLocalJobRequest_ContentMockRecorder
}

// MockisStartLocalJobRequest_ContentMockRecorder is the mock recorder for MockisStartLocalJobRequest_Content.
type MockisStartLocalJobRequest_ContentMockRecorder struct {
	mock *MockisStartLocalJobRequest_Content
}

// NewMockisStartLocalJobRequest_Content creates a new mock instance.
func NewMockisStartLocalJobRequest_Content(ctrl *gomock.Controller) *MockisStartLocalJobRequest_Content {
	mock := &MockisStartLocalJobRequest_Content{ctrl: ctrl}
	mock.recorder = &MockisStartLocalJobRequest_ContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisStartLocalJobRequest_Content) EXPECT() *MockisStartLocalJobRequest_ContentMockRecorder {
	return m.recorder
}

// isStartLocalJobRequest_Content mocks base method.
func (m *MockisStartLocalJobRequest_Content) isStartLocalJobRequest_Content() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isStartLocalJobRequest_Content")
}

// isStartLocalJobRequest_Content indicates an expected call of isStartLocalJobRequest_Content.
func (mr *MockisStartLocalJobRequest_ContentMockRecorder) isStartLocalJobRequest_Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isStartLocalJobRequest_Content", reflect.TypeOf((*MockisStartLocalJobRequest_Content)(nil).isStartLocalJobRequest_Content))
}

// MockisJobSpec_Source is a mock of isJobSpec_Source interface.
type MockisJobSpec_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisJobSpec_SourceMockRecorder
}

// MockisJobSpec_SourceMockRecorder is the mock recorder for MockisJobSpec_Source.
type MockisJobSpec_SourceMockRecorder struct {
	mock *MockisJobSpec_Source
}

// NewMockisJobSpec_Source creates a new mock instance.
func NewMockisJobSpec_Source(ctrl *gomock.Controller) *MockisJobSpec_Source {
	mock := &MockisJobSpec_Source{ctrl: ctrl}
	mock.recorder = &MockisJobSpec_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisJobSpec_Source) EXPECT() *MockisJobSpec_SourceMockRecorder {
	return m.recorder
}

// isJobSpec_Source mocks base method.
func (m *MockisJobSpec_Source) isJobSpec_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isJobSpec_Source")
}

// isJobSpec_Source indicates an expected call of isJobSpec_Source.
func (mr *MockisJobSpec_SourceMockRecorder) isJobSpec_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isJobSpec_Source", reflect.TypeOf((*MockisJobSpec_Source)(nil).isJobSpec_Source))
}

// MockisListenResponse_Content is a mock of isListenResponse_Content interface.
type MockisListenResponse_Content struct {
	ctrl     *gomock.Controller
	recorder *MockisListenResponse_ContentMockRecorder
}

// MockisListenResponse_ContentMockRecorder is the mock recorder for MockisListenResponse_Content.
type MockisListenResponse_ContentMockRecorder struct {
	mock *MockisListenResponse_Content
}

// NewMockisListenResponse_Content creates a new mock instance.
func NewMockisListenResponse_Content(ctrl *gomock.Controller) *MockisListenResponse_Content {
	mock := &MockisListenResponse_Content{ctrl: ctrl}
	mock.recorder = &MockisListenResponse_ContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListenResponse_Content) EXPECT() *MockisListenResponse_ContentMockRecorder {
	return m.recorder
}

// isListenResponse_Content mocks base method.
func (m *MockisListenResponse_Content) isListenResponse_Content() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListenResponse_Content")
}

// isListenResponse_Content indicates an expected call of isListenResponse_Content.
func (mr *MockisListenResponse_ContentMockRecorder) isListenResponse_Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListenResponse_Content", reflect.TypeOf((*MockisListenResponse_Content)(nil).isListenResponse_Content))
}

// MockPiroServiceClient is a mock of PiroServiceClient interface.
type MockPiroServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPiroServiceClientMockRecorder
}

// MockPiroServiceClientMockRecorder is the mock recorder for MockPiroServiceClient.
type MockPiroServiceClientMockRecorder struct {
	mock *MockPiroServiceClient
}

// NewMockPiroServiceClient creates a new mock instance.
func NewMockPiroServiceClient(ctrl *gomock.Controller) *MockPiroServiceClient {
	mock := &MockPiroServiceClient{ctrl: ctrl}
	mock.recorder = &MockPiroServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroServiceClient) EXPECT() *MockPiroServiceClientMockRecorder {
	return m.recorder
}

// GetJob mocks base method.
func (m *MockPiroServiceClient) GetJob(ctx context.Context, in *v1.GetJobRequest, opts ...grpc.CallOption) (*v1.GetJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJob", varargs...)
	ret0, _ := ret[0].(*v1.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockPiroServiceClientMockRecorder) GetJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockPiroServiceClient)(nil).GetJob), varargs...)
}

// ListJobs mocks base method.
func (m *MockPiroServiceClient) ListJobs(ctx context.Context, in *v1.ListJobsRequest, opts ...grpc.CallOption) (*v1.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobs", varargs...)
	ret0, _ := ret[0].(*v1.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockPiroServiceClientMockRecorder) ListJobs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockPiroServiceClient)(nil).ListJobs), varargs...)
}

// Listen mocks base method.
func (m *MockPiroServiceClient) Listen(ctx context.Context, in *v1.ListenRequest, opts ...grpc.CallOption) (v1.PiroService_ListenClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Listen", varargs...)
	ret0, _ := ret[0].(v1.PiroService_ListenClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockPiroServiceClientMockRecorder) Listen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockPiroServiceClient)(nil).Listen), varargs...)
}

// StartFromPreviousJob mocks base method.
func (m *MockPiroServiceClient) StartFromPreviousJob(ctx context.Context, in *v1.StartFromPreviousJobRequest, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFromPreviousJob", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFromPreviousJob indicates an expected call of StartFromPreviousJob.
func (mr *MockPiroServiceClientMockRecorder) StartFromPreviousJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromPreviousJob", reflect.TypeOf((*MockPiroServiceClient)(nil).StartFromPreviousJob), varargs...)
}

// StartGitHubJob mocks base method.
func (m *MockPiroServiceClient) StartGitHubJob(ctx context.Context, in *v1.StartGitHubJobRequest, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartGitHubJob", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGitHubJob indicates an expected call of StartGitHubJob.
func (mr *MockPiroServiceClientMockRecorder) StartGitHubJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGitHubJob", reflect.TypeOf((*MockPiroServiceClient)(nil).StartGitHubJob), varargs...)
}

// StartJob mocks base method.
func (m *MockPiroServiceClient) StartJob(ctx context.Context, in *v1.StartJobRequest, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJob", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockPiroServiceClientMockRecorder) StartJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockPiroServiceClient)(nil).StartJob), varargs...)
}

// StartJob2 mocks base method.
func (m *MockPiroServiceClient) StartJob2(ctx context.Context, in *v1.StartJobRequest2, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJob2", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob2 indicates an expected call of StartJob2.
func (mr *MockPiroServiceClientMockRecorder) StartJob2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob2", reflect.TypeOf((*MockPiroServiceClient)(nil).StartJob2), varargs...)
}

// StartLocalJob mocks base method.
func (m *MockPiroServiceClient) StartLocalJob(ctx context.Context, opts ...grpc.CallOption) (v1.PiroService_StartLocalJobClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLocalJob", varargs...)
	ret0, _ := ret[0].(v1.PiroService_StartLocalJobClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLocalJob indicates an expected call of StartLocalJob.
func (mr *MockPiroServiceClientMockRecorder) StartLocalJob(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLocalJob", reflect.TypeOf((*MockPiroServiceClient)(nil).StartLocalJob), varargs...)
}

// StopJob mocks base method.
func (m *MockPiroServiceClient) StopJob(ctx context.Context, in *v1.StopJobRequest, opts ...grpc.CallOption) (*v1.StopJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopJob", varargs...)
	ret0, _ := ret[0].(*v1.StopJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJob indicates an expected call of StopJob.
func (mr *MockPiroServiceClientMockRecorder) StopJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockPiroServiceClient)(nil).StopJob), varargs...)
}

// Subscribe mocks base method.
func (m *MockPiroServiceClient) Subscribe(ctx context.Context, in *v1.SubscribeRequest, opts ...grpc.CallOption) (v1.PiroService_SubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(v1.PiroService_SubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPiroServiceClientMockRecorder) Subscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPiroServiceClient)(nil).Subscribe), varargs...)
}

// MockPiroService_StartLocalJobClient is a mock of PiroService_StartLocalJobClient interface.
type MockPiroService_StartLocalJobClient struct {
	ctrl     *gomock.Controller
	recorder *MockPiroService_StartLocalJobClientMockRecorder
}

// MockPiroService_StartLocalJobClientMockRecorder is the mock recorder for MockPiroService_StartLocalJobClient.
type MockPiroService_StartLocalJobClientMockRecorder struct {
	mock *MockPiroService_StartLocalJobClient
}

// NewMockPiroService_StartLocalJobClient creates a new mock instance.
func NewMockPiroService_StartLocalJobClient(ctrl *gomock.Controller) *MockPiroService_StartLocalJobClient {
	mock := &MockPiroService_StartLocalJobClient{ctrl: ctrl}
	mock.recorder = &MockPiroService_StartLocalJobClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroService_StartLocalJobClient) EXPECT() *MockPiroService_StartLocalJobClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockPiroService_StartLocalJobClient) CloseAndRecv() (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockPiroService_StartLocalJobClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPiroService_StartLocalJobClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPiroService_StartLocalJobClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockPiroService_StartLocalJobClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPiroService_StartLocalJobClient) Send(arg0 *v1.StartLocalJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPiroService_StartLocalJobClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPiroService_StartLocalJobClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPiroService_StartLocalJobClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPiroService_StartLocalJobClient)(nil).Trailer))
}

// MockPiroService_SubscribeClient is a mock of PiroService_SubscribeClient interface.
type MockPiroService_SubscribeClient struct {
	ctrl     *gomock.Controller
	recorder *MockPiroService_SubscribeClientMockRecorder
}

// MockPiroService_SubscribeClientMockRecorder is the mock recorder for MockPiroService_SubscribeClient.
type MockPiroService_SubscribeClientMockRecorder struct {
	mock *MockPiroService_SubscribeClient
}

// NewMockPiroService_SubscribeClient creates a new mock instance.
func NewMockPiroService_SubscribeClient(ctrl *gomock.Controller) *MockPiroService_SubscribeClient {
	mock := &MockPiroService_SubscribeClient{ctrl: ctrl}
	mock.recorder = &MockPiroService_SubscribeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroService_SubscribeClient) EXPECT() *MockPiroService_SubscribeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPiroService_SubscribeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPiroService_SubscribeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPiroService_SubscribeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPiroService_SubscribeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPiroService_SubscribeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPiroService_SubscribeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPiroService_SubscribeClient) Recv() (*v1.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPiroService_SubscribeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPiroService_SubscribeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPiroService_SubscribeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPiroService_SubscribeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPiroService_SubscribeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPiroService_SubscribeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPiroService_SubscribeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPiroService_SubscribeClient)(nil).Trailer))
}

// MockPiroService_ListenClient is a mock of PiroService_ListenClient interface.
type MockPiroService_ListenClient struct {
	ctrl     *gomock.Controller
	recorder *MockPiroService_ListenClientMockRecorder
}

// MockPiroService_ListenClientMockRecorder is the mock recorder for MockPiroService_ListenClient.
type MockPiroService_ListenClientMockRecorder struct {
	mock *MockPiroService_ListenClient
}

// NewMockPiroService_ListenClient creates a new mock instance.
func NewMockPiroService_ListenClient(ctrl *gomock.Controller) *MockPiroService_ListenClient {
	mock := &MockPiroService_ListenClient{ctrl: ctrl}
	mock.recorder = &MockPiroService_ListenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroService_ListenClient) EXPECT() *MockPiroService_ListenClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPiroService_ListenClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPiroService_ListenClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPiroService_ListenClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPiroService_ListenClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPiroService_ListenClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPiroService_ListenClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPiroService_ListenClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPiroService_ListenClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPiroService_ListenClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPiroService_ListenClient) Recv() (*v1.ListenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ListenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPiroService_ListenClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPiroService_ListenClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPiroService_ListenClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPiroService_ListenClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPiroService_ListenClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPiroService_ListenClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPiroService_ListenClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPiroService_ListenClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPiroService_ListenClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPiroService_ListenClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPiroService_ListenClient)(nil).Trailer))
}

// MockPiroServiceServer is a mock of PiroServiceServer interface.
type MockPiroServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPiroServiceServerMockRecorder
}

// MockPiroServiceServerMockRecorder is the mock recorder for MockPiroServiceServer.
type MockPiroServiceServerMockRecorder struct {
	mock *MockPiroServiceServer
}

// NewMockPiroServiceServer creates a new mock instance.
func NewMockPiroServiceServer(ctrl *gomock.Controller) *MockPiroServiceServer {
	mock := &MockPiroServiceServer{ctrl: ctrl}
	mock.recorder = &MockPiroServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroServiceServer) EXPECT() *MockPiroServiceServerMockRecorder {
	return m.recorder
}

// GetJob mocks base method.
func (m *MockPiroServiceServer) GetJob(arg0 context.Context, arg1 *v1.GetJobRequest) (*v1.GetJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockPiroServiceServerMockRecorder) GetJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockPiroServiceServer)(nil).GetJob), arg0, arg1)
}

// ListJobs mocks base method.
func (m *MockPiroServiceServer) ListJobs(arg0 context.Context, arg1 *v1.ListJobsRequest) (*v1.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockPiroServiceServerMockRecorder) ListJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockPiroServiceServer)(nil).ListJobs), arg0, arg1)
}

// Listen mocks base method.
func (m *MockPiroServiceServer) Listen(arg0 *v1.ListenRequest, arg1 v1.PiroService_ListenServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockPiroServiceServerMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockPiroServiceServer)(nil).Listen), arg0, arg1)
}

// StartFromPreviousJob mocks base method.
func (m *MockPiroServiceServer) StartFromPreviousJob(arg0 context.Context, arg1 *v1.StartFromPreviousJobRequest) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFromPreviousJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFromPreviousJob indicates an expected call of StartFromPreviousJob.
func (mr *MockPiroServiceServerMockRecorder) StartFromPreviousJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromPreviousJob", reflect.TypeOf((*MockPiroServiceServer)(nil).StartFromPreviousJob), arg0, arg1)
}

// StartGitHubJob mocks base method.
func (m *MockPiroServiceServer) StartGitHubJob(arg0 context.Context, arg1 *v1.StartGitHubJobRequest) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGitHubJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGitHubJob indicates an expected call of StartGitHubJob.
func (mr *MockPiroServiceServerMockRecorder) StartGitHubJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGitHubJob", reflect.TypeOf((*MockPiroServiceServer)(nil).StartGitHubJob), arg0, arg1)
}

// StartJob mocks base method.
func (m *MockPiroServiceServer) StartJob(arg0 context.Context, arg1 *v1.StartJobRequest) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockPiroServiceServerMockRecorder) StartJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockPiroServiceServer)(nil).StartJob), arg0, arg1)
}

// StartJob2 mocks base method.
func (m *MockPiroServiceServer) StartJob2(arg0 context.Context, arg1 *v1.StartJobRequest2) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob2", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob2 indicates an expected call of StartJob2.
func (mr *MockPiroServiceServerMockRecorder) StartJob2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob2", reflect.TypeOf((*MockPiroServiceServer)(nil).StartJob2), arg0, arg1)
}

// StartLocalJob mocks base method.
func (m *MockPiroServiceServer) StartLocalJob(arg0 v1.PiroService_StartLocalJobServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLocalJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartLocalJob indicates an expected call of StartLocalJob.
func (mr *MockPiroServiceServerMockRecorder) StartLocalJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLocalJob", reflect.TypeOf((*MockPiroServiceServer)(nil).StartLocalJob), arg0)
}

// StopJob mocks base method.
func (m *MockPiroServiceServer) StopJob(arg0 context.Context, arg1 *v1.StopJobRequest) (*v1.StopJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StopJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJob indicates an expected call of StopJob.
func (mr *MockPiroServiceServerMockRecorder) StopJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockPiroServiceServer)(nil).StopJob), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockPiroServiceServer) Subscribe(arg0 *v1.SubscribeRequest, arg1 v1.PiroService_SubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPiroServiceServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPiroServiceServer)(nil).Subscribe), arg0, arg1)
}

// MockPiroService_StartLocalJobServer is a mock of PiroService_StartLocalJobServer interface.
type MockPiroService_StartLocalJobServer struct {
	ctrl     *gomock.Controller
	recorder *MockPiroService_StartLocalJobServerMockRecorder
}

// MockPiroService_StartLocalJobServerMockRecorder is the mock recorder for MockPiroService_StartLocalJobServer.
type MockPiroService_StartLocalJobServerMockRecorder struct {
	mock *MockPiroService_StartLocalJobServer
}

// NewMockPiroService_StartLocalJobServer creates a new mock instance.
func NewMockPiroService_StartLocalJobServer(ctrl *gomock.Controller) *MockPiroService_StartLocalJobServer {
	mock := &MockPiroService_StartLocalJobServer{ctrl: ctrl}
	mock.recorder = &MockPiroService_StartLocalJobServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroService_StartLocalJobServer) EXPECT() *MockPiroService_StartLocalJobServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPiroService_StartLocalJobServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPiroService_StartLocalJobServer) Recv() (*v1.StartLocalJobRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.StartLocalJobRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPiroService_StartLocalJobServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockPiroService_StartLocalJobServer) SendAndClose(arg0 *v1.StartJobResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockPiroService_StartLocalJobServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPiroService_StartLocalJobServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPiroService_StartLocalJobServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPiroService_StartLocalJobServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPiroService_StartLocalJobServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPiroService_StartLocalJobServer)(nil).SetTrailer), arg0)
}

// MockPiroService_SubscribeServer is a mock of PiroService_SubscribeServer interface.
type MockPiroService_SubscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockPiroService_SubscribeServerMockRecorder
}

// MockPiroService_SubscribeServerMockRecorder is the mock recorder for MockPiroService_SubscribeServer.
type MockPiroService_SubscribeServerMockRecorder struct {
	mock *MockPiroService_SubscribeServer
}

// NewMockPiroService_SubscribeServer creates a new mock instance.
func NewMockPiroService_SubscribeServer(ctrl *gomock.Controller) *MockPiroService_SubscribeServer {
	mock := &MockPiroService_SubscribeServer{ctrl: ctrl}
	mock.recorder = &MockPiroService_SubscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroService_SubscribeServer) EXPECT() *MockPiroService_SubscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPiroService_SubscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPiroService_SubscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPiroService_SubscribeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPiroService_SubscribeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPiroService_SubscribeServer) Send(arg0 *v1.SubscribeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPiroService_SubscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPiroService_SubscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPiroService_SubscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPiroService_SubscribeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPiroService_SubscribeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPiroService_SubscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPiroService_SubscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPiroService_SubscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPiroService_SubscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPiroService_SubscribeServer)(nil).SetTrailer), arg0)
}

// MockPiroService_ListenServer is a mock of PiroService_ListenServer interface.
type MockPiroService_ListenServer struct {
	ctrl     *gomock.Controller
	recorder *MockPiroService_ListenServerMockRecorder
}

// MockPiroService_ListenServerMockRecorder is the mock recorder for MockPiroService_ListenServer.
type MockPiroService_ListenServerMockRecorder struct {
	mock *MockPiroService_ListenServer
}

// NewMockPiroService_ListenServer creates a new mock instance.
func NewMockPiroService_ListenServer(ctrl *gomock.Controller) *MockPiroService_ListenServer {
	mock := &MockPiroService_ListenServer{ctrl: ctrl}
	mock.recorder = &MockPiroService_ListenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiroService_ListenServer) EXPECT() *MockPiroService_ListenServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPiroService_ListenServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPiroService_ListenServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPiroService_ListenServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPiroService_ListenServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPiroService_ListenServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPiroService_ListenServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPiroService_ListenServer) Send(arg0 *v1.ListenResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPiroService_ListenServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPiroService_ListenServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPiroService_ListenServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPiroService_ListenServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPiroService_ListenServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPiroService_ListenServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPiroService_ListenServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPiroService_ListenServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPiroService_ListenServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPiroService_ListenServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPiroService_ListenServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPiroService_ListenServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPiroService_ListenServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPiroService_ListenServer)(nil).SetTrailer), arg0)
}